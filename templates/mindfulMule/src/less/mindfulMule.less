@import "css/mixins/bootstrap/variables.less";
@import "css/mixins/bootstrap/mixins.less";
@import "css/mixins/layout.less";
.webkitScrollbar;

// THEME VARIABLES
// --------------------------------------------------

@externalWidth:     600px;
@externalHeight:    800px;


// EFFECTS
// --------------------------------------------------

a {
    display: block;

    &:active, &.emulate-active {
        .scale(1.5);
    }
}



// GENERAL LAYOUT
// --------------------------------------------------

#main {
    .centralizedCoveringBackground;
    .box(vertical,center, center);
}


// Sets the outer most dimensions in which
// all the content is held i.e. header, pages etc.
#content-container {
    position: relative;
    .size(@externalHeight, @externalWidth);
    .centralizedCoveringBackground;
    .box(vertical,center);
}

#quit-button {
    position: absolute;
    z-index: 1;
}

.items {
    .box-flex(1);
    margin: 30px;
}


// SINGLE LIST ITEMS - VIRTUAL GOODS
// --------------------------------------------------

.item {

    // The item has no fixed height, and neither do its descendant images.
    // This turns the template's items to more flexible in terms of dimensions

    padding: 25px;
    margin: 20px 0;
    .box;
    .centralizedCoveringBackground;
    background-color: #d7ca92;

    & > * {
        padding-right: 15px;

        &:last-child {
            padding-right: 0;
        }
    }

    .content {
        .box-flex(1);
        .box(vertical, center);
    }

    .item-description {
        .hyphens;
        .box-flex(1);
        .box(vertical, center);
    }

    .buy-container {
        .box(vertical, center, center);

        .buy {
            display: block;
        }
        img {
            .maxSize(80px, 140px);
        }
    }


    // Lifetime items have two states: not owned and owned, that are toggled by adding classes to the element
    &.lifetime {

        // State: not owned
        .item-owned {
            display: none;
        }

        // State: owned
        &.owned {

            // cancel opacity change since the item is owned
            a:active, a.emulate-active {
                .scale(1);
            }

            .item-owned {
                display: inherit;
                .animate(pulse 1s);
            }
            .item-price {
                display: none;
            }
        }
    }

}


// MODAL DIALOG
// --------------------------------------------------
.modal {
    .square(100%);
    position: absolute;
    .offset(0, 0);
    .box(horizontal, center, center);
    z-index: 2001;
    background: rgba(0, 0, 0, 0.6);
}

.dialog {
    .size(200px, 520px);
    .box(vertical, center, center);

    h1 {
        font-size: 28px;
        text-align: center;
        width: 480px;
    }

    .item-description {
        .box-flex(1);
        .box(vertical, center, center);
    }

    .actions {
        margin-top: 10px;
        img {
            .maxSize(50px, 200px);
            cursor: pointer;
        }
    }
}
